Elm.Item = Elm.Item || {};
Elm.Item.make = function (_elm) {
   "use strict";
   _elm.Item = _elm.Item || {};
   if (_elm.Item.values) return _elm.Item.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var inFocusKaderStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "border-bottom",_1: "1px solid grey"}
                                                          ,{ctor: "_Tuple2",_0: "border-left",_1: "2px solid lightblue"}
                                                          ,{ctor: "_Tuple2",_0: "display",_1: "block-inline"}
                                                          ,{ctor: "_Tuple2",_0: "margin-left",_1: "auto"}
                                                          ,{ctor: "_Tuple2",_0: "margin-right",_1: "auto"}
                                                          ,{ctor: "_Tuple2",_0: "width",_1: "60%"}]));
   var kaderStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "border-bottom",_1: "1px solid grey"}
                                                   ,{ctor: "_Tuple2",_0: "display",_1: "block-inline"}
                                                   ,{ctor: "_Tuple2",_0: "margin-left",_1: "auto"}
                                                   ,{ctor: "_Tuple2",_0: "margin-right",_1: "auto"}
                                                   ,{ctor: "_Tuple2",_0: "width",_1: "60%"}]));
   var doneBodyStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "font-size",_1: "20px"}
                                                      ,{ctor: "_Tuple2",_0: "font-family",_1: "monospace"}
                                                      ,{ctor: "_Tuple2",_0: "display",_1: "flex"}
                                                      ,{ctor: "_Tuple2",_0: "align-items",_1: "center"}
                                                      ,{ctor: "_Tuple2",_0: "justify-content",_1: "center"}
                                                      ,{ctor: "_Tuple2",_0: "width",_1: "80%"}
                                                      ,{ctor: "_Tuple2",_0: "text-align",_1: "center"}
                                                      ,{ctor: "_Tuple2",_0: "margin-left",_1: "auto"}
                                                      ,{ctor: "_Tuple2",_0: "margin-right",_1: "auto"}
                                                      ,{ctor: "_Tuple2",_0: "opacity",_1: "0.5"}]));
   var pinnedDoneBodyStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "font-size",_1: "20px"}
                                                            ,{ctor: "_Tuple2",_0: "font-family",_1: "monospace"}
                                                            ,{ctor: "_Tuple2",_0: "display",_1: "flex"}
                                                            ,{ctor: "_Tuple2",_0: "align-items",_1: "center"}
                                                            ,{ctor: "_Tuple2",_0: "justify-content",_1: "center"}
                                                            ,{ctor: "_Tuple2",_0: "width",_1: "80%"}
                                                            ,{ctor: "_Tuple2",_0: "text-align",_1: "center"}
                                                            ,{ctor: "_Tuple2",_0: "margin-left",_1: "auto"}
                                                            ,{ctor: "_Tuple2",_0: "margin-right",_1: "auto"}
                                                            ,{ctor: "_Tuple2",_0: "border-left",_1: "2px solid red"}
                                                            ,{ctor: "_Tuple2",_0: "padding-left",_1: "2px"}
                                                            ,{ctor: "_Tuple2",_0: "opacity",_1: "0.5"}]));
   var pinnedBodyStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "font-size",_1: "20px"}
                                                        ,{ctor: "_Tuple2",_0: "font-family",_1: "monospace"}
                                                        ,{ctor: "_Tuple2",_0: "display",_1: "flex"}
                                                        ,{ctor: "_Tuple2",_0: "align-items",_1: "center"}
                                                        ,{ctor: "_Tuple2",_0: "justify-content",_1: "center"}
                                                        ,{ctor: "_Tuple2",_0: "width",_1: "80%"}
                                                        ,{ctor: "_Tuple2",_0: "text-align",_1: "center"}
                                                        ,{ctor: "_Tuple2",_0: "margin-left",_1: "auto"}
                                                        ,{ctor: "_Tuple2",_0: "margin-right",_1: "auto"}
                                                        ,{ctor: "_Tuple2",_0: "border-left",_1: "2px solid red"}
                                                        ,{ctor: "_Tuple2",_0: "padding-left",_1: "2px"}]));
   var metaStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "font-size",_1: "14px"}
                                                  ,{ctor: "_Tuple2",_0: "font-family",_1: "monospace"}
                                                  ,{ctor: "_Tuple2",_0: "display",_1: "flex"}
                                                  ,{ctor: "_Tuple2",_0: "align-items",_1: "center"}
                                                  ,{ctor: "_Tuple2",_0: "justify-content",_1: "space-around"}
                                                  ,{ctor: "_Tuple2",_0: "width",_1: "80%"}
                                                  ,{ctor: "_Tuple2",_0: "text-align",_1: "center"}
                                                  ,{ctor: "_Tuple2",_0: "margin-left",_1: "auto"}
                                                  ,{ctor: "_Tuple2",_0: "margin-right",_1: "auto"}]));
   var bodyStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "font-size",_1: "20px"}
                                                  ,{ctor: "_Tuple2",_0: "font-family",_1: "monospace"}
                                                  ,{ctor: "_Tuple2",_0: "display",_1: "flex"}
                                                  ,{ctor: "_Tuple2",_0: "align-items",_1: "center"}
                                                  ,{ctor: "_Tuple2",_0: "justify-content",_1: "center"}
                                                  ,{ctor: "_Tuple2",_0: "width",_1: "80%"}
                                                  ,{ctor: "_Tuple2",_0: "text-align",_1: "center"}
                                                  ,{ctor: "_Tuple2",_0: "margin-left",_1: "auto"}
                                                  ,{ctor: "_Tuple2",_0: "margin-right",_1: "auto"}]));
   var prettyHTMLPrint = function (model) {
      return A2($Html.div,
      _U.list([metaStyle]),
      function () {
         var tupleprint = function (_p0) {
            var _p1 = _p0;
            return A2($Html.p,_U.list([]),_U.list([$Html.text(A2($Basics._op["++"],_p1._0,A2($Basics._op["++"],": ",_p1._1)))]));
         };
         return A2($List.map,tupleprint,A2($List.filter,function (_p2) {    var _p3 = _p2;return !_U.eq(_p3._0,"body");},model.params));
      }());
   };
   var update = F2(function (action,model) {
      var _p4 = action;
      switch (_p4.ctor)
      {case "Pin": return _U.update(model,{pinned: $Basics.not(model.pinned)});
         case "Done": return _U.update(model,{done: $Basics.not(model.done)});
         case "Truncate": return model.truncable && _U.cmp($String.length(model.displayedText),200) < 1 ? _U.update(model,
           {displayedText: model.body}) : model.truncable && _U.cmp($String.length(model.displayedText),200) > 0 ? _U.update(model,
           {displayedText: A2($String.left,200,model.body)}) : model;
         case "Focus": return _U.update(model,{infocus: true});
         default: return _U.update(model,{infocus: false});}
   });
   var Unfocus = {ctor: "Unfocus"};
   var Focus = {ctor: "Focus"};
   var Done = {ctor: "Done"};
   var Truncate = {ctor: "Truncate"};
   var Pin = {ctor: "Pin"};
   var view = F2(function (address,model) {
      return model.truncable ? A2($Html.div,
      _U.list([model.infocus ? inFocusKaderStyle : kaderStyle]),
      _U.list([prettyHTMLPrint(model)
              ,model.pinned && $Basics.not(model.done) ? A2($Html.div,
              _U.list([pinnedBodyStyle]),
              _U.list([$Html.text(model.displayedText)])) : model.done && model.pinned ? A2($Html.div,
              _U.list([pinnedDoneBodyStyle]),
              _U.list([$Html.text(model.displayedText)])) : model.done && $Basics.not(model.pinned) ? A2($Html.div,
              _U.list([doneBodyStyle]),
              _U.list([$Html.text(model.displayedText)])) : A2($Html.div,_U.list([bodyStyle]),_U.list([$Html.text(model.displayedText)]))
              ,A2($Html.p,
              _U.list([bodyStyle]),
              _U.list([A2($Html.button,_U.list([A2($Html$Events.onClick,address,Pin)]),_U.list([model.pinned ? $Html.text("Unpin") : $Html.text("Pin")]))
                      ,A2($Html.button,_U.list([A2($Html$Events.onClick,address,Done)]),_U.list([model.done ? $Html.text("Undo") : $Html.text("Mark Done")]))
                      ,A2($Html.button,
                      _U.list([A2($Html$Events.onClick,address,Truncate)]),
                      _U.list([_U.cmp($String.length(model.displayedText),200) > 0 ? $Html.text("less") : $Html.text("more")]))]))])) : A2($Html.div,
      _U.list([model.infocus ? inFocusKaderStyle : kaderStyle]),
      _U.list([prettyHTMLPrint(model)
              ,model.pinned && $Basics.not(model.done) ? A2($Html.div,
              _U.list([pinnedBodyStyle]),
              _U.list([$Html.text(model.displayedText)])) : model.done && model.pinned ? A2($Html.div,
              _U.list([pinnedDoneBodyStyle]),
              _U.list([$Html.text(model.displayedText)])) : model.done && $Basics.not(model.pinned) ? A2($Html.div,
              _U.list([doneBodyStyle]),
              _U.list([$Html.text(model.displayedText)])) : A2($Html.div,_U.list([bodyStyle]),_U.list([$Html.text(model.displayedText)]))
              ,A2($Html.p,
              _U.list([bodyStyle]),
              _U.list([A2($Html.button,_U.list([A2($Html$Events.onClick,address,Pin)]),_U.list([model.pinned ? $Html.text("Unpin") : $Html.text("Pin")]))
                      ,A2($Html.button,
                      _U.list([A2($Html$Events.onClick,address,Done)]),
                      _U.list([model.done ? $Html.text("Undo") : $Html.text("Mark Done")]))]))]));
   });
   var extractDate = function (list) {
      var isDateField = function (_p5) {    var _p6 = _p5;var _p7 = _p6._0;return _U.eq(_p7,"created") || _U.eq(_p7,"date") ? _p6._1 : "";};
      return A2($Result.withDefault,
      $Date.fromTime(0),
      $Date.fromString(A2($Maybe.withDefault,"",$List.head(A2($List.filter,function (a) {    return !_U.eq(a,"");},A2($List.map,isDateField,list))))));
   };
   var Model = F8(function (a,b,c,d,e,f,g,h) {    return {done: a,pinned: b,truncable: c,infocus: d,displayedText: e,body: f,order: g,params: h};});
   var init = F5(function (done,pinned,focus,body,params) {
      return A8(Model,done,pinned,_U.cmp($String.length(body),200) > 0,focus,A2($String.left,200,body),body,extractDate(params),params);
   });
   return _elm.Item.values = {_op: _op
                             ,Model: Model
                             ,init: init
                             ,extractDate: extractDate
                             ,Pin: Pin
                             ,Truncate: Truncate
                             ,Done: Done
                             ,Focus: Focus
                             ,Unfocus: Unfocus
                             ,update: update
                             ,view: view
                             ,prettyHTMLPrint: prettyHTMLPrint
                             ,bodyStyle: bodyStyle
                             ,metaStyle: metaStyle
                             ,pinnedBodyStyle: pinnedBodyStyle
                             ,pinnedDoneBodyStyle: pinnedDoneBodyStyle
                             ,doneBodyStyle: doneBodyStyle
                             ,kaderStyle: kaderStyle
                             ,inFocusKaderStyle: inFocusKaderStyle};
};