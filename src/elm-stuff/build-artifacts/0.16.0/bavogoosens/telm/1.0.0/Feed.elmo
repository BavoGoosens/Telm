Elm.Feed = Elm.Feed || {};
Elm.Feed.make = function (_elm) {
   "use strict";
   _elm.Feed = _elm.Feed || {};
   if (_elm.Feed.values) return _elm.Feed.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Item = Elm.Item.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Static = Elm.Static.make(_elm);
   var _op = {};
   var monthToInt = function (month) {
      var _p0 = month;
      switch (_p0.ctor)
      {case "Jan": return 1;
         case "Feb": return 2;
         case "Mar": return 3;
         case "Apr": return 4;
         case "May": return 5;
         case "Jun": return 6;
         case "Jul": return 7;
         case "Aug": return 8;
         case "Sep": return 9;
         case "Oct": return 10;
         case "Nov": return 11;
         default: return 12;}
   };
   var headerStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "font-size",_1: "40px"}
                                                    ,{ctor: "_Tuple2",_0: "font-family",_1: "monospace"}
                                                    ,{ctor: "_Tuple2",_0: "display",_1: "flex"}
                                                    ,{ctor: "_Tuple2",_0: "width",_1: "60%"}
                                                    ,{ctor: "_Tuple2",_0: "text-align",_1: "left"}
                                                    ,{ctor: "_Tuple2",_0: "margin-left",_1: "auto"}
                                                    ,{ctor: "_Tuple2",_0: "margin-right",_1: "auto"}]));
   var update = F2(function (action,model) {
      var _p1 = action;
      switch (_p1.ctor)
      {case "Add": return _U.update(model,
           {todo: A2($List._op["::"],{ctor: "_Tuple2",_0: model.todoID,_1: A4($Item.init,_p1._0,_p1._1,_p1._2,_p1._3)},model.todo),todoID: model.todoID + 1});
         case "Remove": var _p6 = _p1._0;
           return _U.update(model,
           {todo: A2($List.filter,function (_p2) {    var _p3 = _p2;return !_U.eq(_p3._0,_p6);},model.todo)
           ,done: A2($List.filter,function (_p4) {    var _p5 = _p4;return !_U.eq(_p5._0,_p6);},model.done)});
         case "Next": return _U.cmp(model.focus,model.len) < 0 ? _U.update(model,{focus: model.focus + 1}) : _U.update(model,{focus: 0});
         case "Previous": return _U.cmp(model.focus,0) > 0 ? _U.update(model,{focus: model.focus - 1}) : _U.update(model,{focus: model.len});
         case "Modify": var _p17 = _p1._2;
           var _p16 = _p1._1;
           var _p15 = _p1._0;
           if (_U.eq(_p17,$Item.Done)) return _p16.done ? _U.update(model,
              {todo: A2($Basics._op["++"],model.todo,_U.list([{ctor: "_Tuple2",_0: _p15,_1: A2($Item.update,_p17,_p16)}]))
              ,done: A2($List.filter,function (_p7) {    var _p8 = _p7;return !_U.eq(_p8._0,_p15);},model.done)}) : _U.update(model,
              {done: A2($Basics._op["++"],model.done,_U.list([{ctor: "_Tuple2",_0: _p15,_1: A2($Item.update,_p17,_p16)}]))
              ,todo: A2($List.filter,function (_p9) {    var _p10 = _p9;return !_U.eq(_p10._0,_p15);},model.todo)}); else {
                 var updateItem = function (_p11) {
                    var _p12 = _p11;
                    var _p14 = _p12._1;
                    var _p13 = _p12._0;
                    return _U.eq(_p13,_p15) ? {ctor: "_Tuple2",_0: _p13,_1: A2($Item.update,_p17,_p14)} : {ctor: "_Tuple2",_0: _p13,_1: _p14};
                 };
                 return _U.update(model,{todo: A2($List.map,updateItem,model.todo),done: A2($List.map,updateItem,model.done)});
              }
         default: return model;}
   });
   var AlterSort = {ctor: "AlterSort"};
   var Modify = F3(function (a,b,c) {    return {ctor: "Modify",_0: a,_1: b,_2: c};});
   var viewItem = F2(function (address,_p18) {
      var _p19 = _p18;
      var _p20 = _p19._1;
      return A2($Item.view,A2($Signal.forwardTo,address,A2(Modify,_p19._0,_p20)),_p20);
   });
   var Remove = function (a) {    return {ctor: "Remove",_0: a};};
   var Add = F4(function (a,b,c,d) {    return {ctor: "Add",_0: a,_1: b,_2: c,_3: d};});
   var Next = {ctor: "Next"};
   var Previous = {ctor: "Previous"};
   var dateComparison = F2(function (a,b) {
      return _U.eq($Date.year(a),$Date.year(b)) ? _U.eq(monthToInt($Date.month(a)),monthToInt($Date.month(b))) ? _U.eq($Date.day(a),
      $Date.day(b)) ? $Basics.EQ : _U.cmp($Date.day(a),$Date.day(b)) > 0 ? $Basics.GT : $Basics.LT : _U.cmp(monthToInt($Date.month(a)),
      monthToInt($Date.month(b))) > 0 ? $Basics.GT : $Basics.LT : _U.cmp($Date.year(a),$Date.year(b)) > 0 ? $Basics.GT : $Basics.LT;
   });
   var customComparison = F2(function (_p22,_p21) {
      var _p23 = _p22;
      var _p26 = _p23._1;
      var _p24 = _p21;
      var _p25 = _p24._1;
      return _p26.pinned && $Basics.not(_p25.pinned) ? $Basics.LT : $Basics.not(_p26.pinned) && _p25.pinned ? $Basics.GT : A2(dateComparison,
      _p26.order,
      _p25.order);
   });
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.h1,_U.list([headerStyle]),_U.list([$Html.text("Todo ")]))
              ,A2($Html.div,_U.list([]),A2($List.map,viewItem(address),A2($List.sortWith,customComparison,model.todo)))
              ,A2($Html.h1,_U.list([headerStyle]),_U.list([$Html.text("Done ")]))
              ,A2($Html.div,_U.list([]),A2($List.map,viewItem(address),A2($List.sortWith,customComparison,model.done)))]));
   });
   var bulk_init_email = function (record) {    return A4($Item.init,false,false,record.body,$Static.get_other_email_attributes(record));};
   var bulk_init_reminder = function (record) {    return A4($Item.init,false,false,record.body,$Static.get_other_reminder_attributes(record));};
   var initialize = A3($List.map2,
   F2(function (v0,v1) {    return {ctor: "_Tuple2",_0: v0,_1: v1};}),
   _U.list([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]),
   A2($List.append,A2($List.map,bulk_init_reminder,$Static.reminders),A2($List.map,bulk_init_email,$Static.emails)));
   var Model = F6(function (a,b,c,d,e,f) {    return {focus: a,len: b,todo: c,done: d,todoID: e,doneID: f};});
   var init = function () {    var wut = initialize;return A6(Model,0,$List.length(wut),wut,_U.list([]),$List.length(wut),0);}();
   return _elm.Feed.values = {_op: _op
                             ,Model: Model
                             ,init: init
                             ,initialize: initialize
                             ,bulk_init_reminder: bulk_init_reminder
                             ,bulk_init_email: bulk_init_email
                             ,customComparison: customComparison
                             ,dateComparison: dateComparison
                             ,Previous: Previous
                             ,Next: Next
                             ,Add: Add
                             ,Remove: Remove
                             ,Modify: Modify
                             ,AlterSort: AlterSort
                             ,update: update
                             ,view: view
                             ,viewItem: viewItem
                             ,headerStyle: headerStyle
                             ,monthToInt: monthToInt};
};