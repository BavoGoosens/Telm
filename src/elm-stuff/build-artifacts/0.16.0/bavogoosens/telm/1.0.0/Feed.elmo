Elm.Feed = Elm.Feed || {};
Elm.Feed.make = function (_elm) {
   "use strict";
   _elm.Feed = _elm.Feed || {};
   if (_elm.Feed.values) return _elm.Feed.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Char = Elm.Char.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Item = Elm.Item.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Static = Elm.Static.make(_elm);
   var _op = {};
   var footerStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "width",_1: "100%"}
                                                    ,{ctor: "_Tuple2",_0: "position",_1: "fixed"}
                                                    ,{ctor: "_Tuple2",_0: "bottom",_1: "0"}]));
   var inputStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "width",_1: "30%"}
                                                   ,{ctor: "_Tuple2",_0: "height",_1: "40px"}
                                                   ,{ctor: "_Tuple2",_0: "padding",_1: "10px 0"}
                                                   ,{ctor: "_Tuple2",_0: "font-size",_1: "2em"}
                                                   ,{ctor: "_Tuple2",_0: "font-family",_1: "monospace"}
                                                   ,{ctor: "_Tuple2",_0: "text-align",_1: "center"}
                                                   ,{ctor: "_Tuple2",_0: "margin-left",_1: "auto"}
                                                   ,{ctor: "_Tuple2",_0: "margin-right",_1: "auto"}
                                                   ,{ctor: "_Tuple2",_0: "display",_1: "flex"}
                                                   ,{ctor: "_Tuple2",_0: "align-items",_1: "baseline"}
                                                   ,{ctor: "_Tuple2",_0: "justify-content",_1: "center"}]));
   var headerStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "font-size",_1: "40px"}
                                                    ,{ctor: "_Tuple2",_0: "font-family",_1: "monospace"}
                                                    ,{ctor: "_Tuple2",_0: "display",_1: "flex"}
                                                    ,{ctor: "_Tuple2",_0: "width",_1: "60%"}
                                                    ,{ctor: "_Tuple2",_0: "text-align",_1: "left"}
                                                    ,{ctor: "_Tuple2",_0: "margin-left",_1: "auto"}
                                                    ,{ctor: "_Tuple2",_0: "margin-right",_1: "auto"}]));
   var display = function (keyCodes) {
      return $Html.text(A2($Basics._op["++"],"You are holding down the following keys: ",$Basics.toString($Set.toList(keyCodes))));
   };
   var ReminderDate = function (a) {    return {ctor: "ReminderDate",_0: a};};
   var ReminderBody = function (a) {    return {ctor: "ReminderBody",_0: a};};
   var FinishFocussed = {ctor: "FinishFocussed"};
   var PinFocussed = {ctor: "PinFocussed"};
   var TruncateFocussed = {ctor: "TruncateFocussed"};
   var ReadInput = {ctor: "ReadInput"};
   var HideDone = {ctor: "HideDone"};
   var HideInput = {ctor: "HideInput"};
   var AlterSort = {ctor: "AlterSort"};
   var Modify = F3(function (a,b,c) {    return {ctor: "Modify",_0: a,_1: b,_2: c};});
   var viewItem = F2(function (address,_p0) {
      var _p1 = _p0;
      var _p2 = _p1._1;
      return A2($Item.view,A2($Signal.forwardTo,address,A2(Modify,_p1._0,_p2)),_p2);
   });
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      _U.list([model.input ? A2($Html.div,
              _U.list([footerStyle]),
              _U.list([A2($Html.input,
                      _U.list([$Html$Attributes.type$("text")
                              ,$Html$Attributes.wrap("hard")
                              ,$Html$Attributes.name("want")
                              ,A3($Html$Events.on,"input",$Html$Events.targetValue,function (_p3) {    return A2($Signal.message,address,ReminderBody(_p3));})
                              ,$Html$Attributes.placeholder("What needs to get done ?")
                              ,inputStyle]),
                      _U.list([]))
                      ,A2($Html.input,
                      _U.list([$Html$Attributes.type$("date")
                              ,$Html$Attributes.name("when")
                              ,A3($Html$Events.on,"input",$Html$Events.targetValue,function (_p4) {    return A2($Signal.message,address,ReminderDate(_p4));})
                              ,inputStyle]),
                      _U.list([]))
                      ,A2($Html.button,_U.list([inputStyle,A2($Html$Events.onClick,address,ReadInput)]),_U.list([$Html.text("add")]))
                      ,A2($Html.button,_U.list([inputStyle,A2($Html$Events.onClick,address,HideInput)]),_U.list([$Html.text("hide")]))])) : A2($Html.div,
              _U.list([footerStyle]),
              _U.list([A2($Html.button,_U.list([inputStyle,A2($Html$Events.onClick,address,HideInput)]),_U.list([$Html.text("show")]))]))
              ,A2($Html.h1,_U.list([headerStyle]),_U.list([$Html.text("Todo ")]))
              ,A2($Html.div,_U.list([]),A2($List.map,viewItem(address),A2($List.sortWith,model.sortFunction,model.todo)))
              ,A2($Html.h1,_U.list([headerStyle]),_U.list([$Html.text("Done ")]))
              ,model.showDone ? A2($Html.div,_U.list([]),A2($List.map,viewItem(address),A2($List.sortWith,model.sortFunction,model.done))) : A2($Html.p,
              _U.list([$Item.bodyStyle]),
              _U.list([$Html.text("Hidden alt+d to show")]))]));
   });
   var Remove = function (a) {    return {ctor: "Remove",_0: a};};
   var Next = {ctor: "Next"};
   var Previous = {ctor: "Previous"};
   var NoOp = {ctor: "NoOp"};
   var actions = $Signal.mailbox(NoOp);
   var parseKeyCode = function (set) {
      var lijst = $Set.toList(set);
      return !_U.eq($List.length(lijst),2) ? NoOp : A2($List.member,18,lijst) ? A2($List.member,74,lijst) ? Next : A2($List.member,
      75,
      lijst) ? Previous : A2($List.member,79,lijst) ? TruncateFocussed : A2($List.member,80,lijst) ? PinFocussed : A2($List.member,
      88,
      lijst) ? FinishFocussed : A2($List.member,83,lijst) ? AlterSort : A2($List.member,72,lijst) ? HideInput : A2($List.member,
      68,
      lijst) ? HideDone : NoOp : NoOp;
   };
   var monthToInt = function (month) {
      var _p5 = month;
      switch (_p5.ctor)
      {case "Jan": return 1;
         case "Feb": return 2;
         case "Mar": return 3;
         case "Apr": return 4;
         case "May": return 5;
         case "Jun": return 6;
         case "Jul": return 7;
         case "Aug": return 8;
         case "Sep": return 9;
         case "Oct": return 10;
         case "Nov": return 11;
         default: return 12;}
   };
   var dateComparison = F2(function (a,b) {
      return _U.eq($Date.year(a),$Date.year(b)) ? _U.eq(monthToInt($Date.month(a)),monthToInt($Date.month(b))) ? _U.eq($Date.day(a),
      $Date.day(b)) ? $Basics.EQ : _U.cmp($Date.day(a),$Date.day(b)) > 0 ? $Basics.GT : $Basics.LT : _U.cmp(monthToInt($Date.month(a)),
      monthToInt($Date.month(b))) > 0 ? $Basics.GT : $Basics.LT : _U.cmp($Date.year(a),$Date.year(b)) > 0 ? $Basics.GT : $Basics.LT;
   });
   var reversedComparison = F2(function (_p7,_p6) {
      var _p8 = _p7;
      var _p11 = _p8._1;
      var _p9 = _p6;
      var _p10 = _p9._1;
      return _U.eq(A2(dateComparison,_p11.order,_p10.order),$Basics.LT) ? $Basics.GT : _U.eq(A2(dateComparison,_p11.order,_p10.order),
      $Basics.GT) ? $Basics.LT : $Basics.EQ;
   });
   var customComparison = F2(function (_p13,_p12) {
      var _p14 = _p13;
      var _p17 = _p14._1;
      var _p15 = _p12;
      var _p16 = _p15._1;
      return _p17.pinned && $Basics.not(_p16.pinned) ? $Basics.LT : $Basics.not(_p17.pinned) && _p16.pinned ? $Basics.GT : A2(dateComparison,
      _p17.order,
      _p16.order);
   });
   var update = F2(function (action,model) {
      var _p18 = action;
      switch (_p18.ctor)
      {case "NoOp": return _U.update(model,{sortFunction: customComparison});
         case "Remove": var _p23 = _p18._0;
           return _U.update(model,
           {todo: A2($List.filter,function (_p19) {    var _p20 = _p19;return !_U.eq(_p20._0,_p23);},model.todo)
           ,done: A2($List.filter,function (_p21) {    var _p22 = _p21;return !_U.eq(_p22._0,_p23);},model.done)
           ,len: model.len - 1});
         case "Next": return model.showDone ? _U.cmp(model.focus,model.len) < 0 ? _U.update(model,{focus: model.focus + 1}) : _U.update(model,
           {focus: 0}) : _U.cmp(model.focus,$List.length(model.todo)) < 0 ? _U.update(model,{focus: model.focus + 1}) : _U.update(model,{focus: 0});
         case "Previous": return _U.cmp(model.focus,0) > 0 ? _U.update(model,{focus: model.focus - 1}) : model.showDone ? _U.update(model,
           {focus: model.len}) : _U.update(model,{focus: $List.length(model.todo)});
         case "Modify": var _p34 = _p18._2;
           var _p33 = _p18._1;
           var _p32 = _p18._0;
           if (_U.eq(_p34,$Item.Done)) return _p33.done ? _U.update(model,
              {todo: A2($Basics._op["++"],model.todo,_U.list([{ctor: "_Tuple2",_0: _p32,_1: A2($Item.update,_p34,_p33)}]))
              ,done: A2($List.filter,function (_p24) {    var _p25 = _p24;return !_U.eq(_p25._0,_p32);},model.done)}) : _U.update(model,
              {done: A2($Basics._op["++"],model.done,_U.list([{ctor: "_Tuple2",_0: _p32,_1: A2($Item.update,_p34,_p33)}]))
              ,todo: A2($List.filter,function (_p26) {    var _p27 = _p26;return !_U.eq(_p27._0,_p32);},model.todo)}); else {
                 var updateItem = function (_p28) {
                    var _p29 = _p28;
                    var _p31 = _p29._1;
                    var _p30 = _p29._0;
                    return _U.eq(_p30,_p32) ? {ctor: "_Tuple2",_0: _p30,_1: A2($Item.update,_p34,_p31)} : {ctor: "_Tuple2",_0: _p30,_1: _p31};
                 };
                 return _U.update(model,{todo: A2($List.map,updateItem,model.todo),done: A2($List.map,updateItem,model.done)});
              }
         case "AlterSort": return _U.update(model,{sortFunction: reversedComparison});
         case "HideInput": return _U.update(model,{input: $Basics.not(model.input)});
         case "HideDone": return _U.update(model,{showDone: $Basics.not(model.showDone)});
         case "ReadInput": return _U.update(model,
           {todo: A2($Basics._op["++"],
           model.todo,
           _U.list([{ctor: "_Tuple2"
                    ,_0: model.todoID + 1
                    ,_1: A4($Item.init,
                    false,
                    false,
                    model.currentReminder,
                    _U.list([{ctor: "_Tuple2",_0: "body",_1: model.currentReminder},{ctor: "_Tuple2",_0: "created",_1: model.currentDate}]))}]))
           ,todoID: model.todoID + 1});
         case "ReminderBody": return _U.update(model,{currentReminder: _p18._0});
         case "ReminderDate": return _U.update(model,{currentDate: _p18._0});
         case "TruncateFocussed": return model;
         case "PinFocussed": return model;
         default: return model;}
   });
   var bulk_init_email = function (record) {    return A4($Item.init,false,false,record.body,$Static.get_other_email_attributes(record));};
   var bulk_init_reminder = function (record) {    return A4($Item.init,false,false,record.body,$Static.get_other_reminder_attributes(record));};
   var initialize = A3($List.map2,
   F2(function (v0,v1) {    return {ctor: "_Tuple2",_0: v0,_1: v1};}),
   _U.list([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]),
   A2($List.append,A2($List.map,bulk_init_reminder,$Static.reminders),A2($List.map,bulk_init_email,$Static.emails)));
   var Model = function (a) {
      return function (b) {
         return function (c) {
            return function (d) {
               return function (e) {
                  return function (f) {
                     return function (g) {
                        return function (h) {
                           return function (i) {
                              return function (j) {
                                 return {focus: a,len: b,todo: c,done: d,todoID: e,input: f,showDone: g,currentReminder: h,currentDate: i,sortFunction: j};
                              };
                           };
                        };
                     };
                  };
               };
            };
         };
      };
   };
   var init = function () {
      var wut = initialize;
      return Model(0)($List.length(wut))(wut)(_U.list([]))($List.length(wut))(true)(true)("")("")(customComparison);
   }();
   var initialModel = init;
   var model = A3($Signal.foldp,update,initialModel,A2($Signal.merge,A2($Signal.map,parseKeyCode,$Keyboard.keysDown),actions.signal));
   return _elm.Feed.values = {_op: _op
                             ,Model: Model
                             ,init: init
                             ,initialize: initialize
                             ,bulk_init_reminder: bulk_init_reminder
                             ,bulk_init_email: bulk_init_email
                             ,customComparison: customComparison
                             ,reversedComparison: reversedComparison
                             ,dateComparison: dateComparison
                             ,monthToInt: monthToInt
                             ,NoOp: NoOp
                             ,Previous: Previous
                             ,Next: Next
                             ,Remove: Remove
                             ,Modify: Modify
                             ,AlterSort: AlterSort
                             ,HideInput: HideInput
                             ,HideDone: HideDone
                             ,ReadInput: ReadInput
                             ,TruncateFocussed: TruncateFocussed
                             ,PinFocussed: PinFocussed
                             ,FinishFocussed: FinishFocussed
                             ,ReminderBody: ReminderBody
                             ,ReminderDate: ReminderDate
                             ,update: update
                             ,view: view
                             ,display: display
                             ,viewItem: viewItem
                             ,actions: actions
                             ,model: model
                             ,initialModel: initialModel
                             ,parseKeyCode: parseKeyCode
                             ,headerStyle: headerStyle
                             ,inputStyle: inputStyle
                             ,footerStyle: footerStyle};
};